# -*- coding: utf-8 -*-
"""Image Classification - Model Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hC4xbpxI3-jHgp4_9zJfZMo2MfOFVY_z
"""

nama = 'Tria Agusti Khoirun Nisa'
email = 'nisaagustin6@gmail.com'
alamat = 'Watesprojo, Kemlagi, Mojokerto'
proyek = 'Image Classification Model Deployment'

print(nama, email, alamat, proyek)

"""Menghubungkan dataset yang ada di Google Drive dengan Google Colab"""

from google.colab import drive
drive.mount('/content/drive')

"""Mengimpor library yang dibutuhkan dalam proyek"""

import tensorflow as tf
import pandas as pd
import os 
import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.preprocessing.image import ImageDataGenerator

"""Membuat nama untuk directory yang ada di dataset dalam Google Drive dan melihat kelasnya """

base_dir = '/content/drive/MyDrive/satelit'
os.listdir(base_dir)

"""Proses Augmentasi Dataset dibagi menjadi 80% train set dan 20% test set."""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode='wrap',
    validation_split=0.2)

"""Menyiapkan data latih dan data validasi dari kumpulan data gambar yang di-load dalam memori melalui fungsi flow()"""

train_generator = train_datagen.flow_from_directory(
    base_dir, 
    target_size=(100,150),
    shuffle=True,
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size=(100,150),
    subset='validation')

"""Pembuatan CNN (Convolutional Neural Network). Proses klasifikasi gambar hanya berfokus pada atribut-atribut unik yang membedakan tiap kategori."""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(100, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(4, activation='softmax')
])

model.summary()

"""Melakukan compile model menggunakan fungsi compile()"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""Menggunakan Callback"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.90):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
      
callbacks = myCallback()

"""Pembuatan model yaitu model fitting. Proses ini memasukkan data latih pada jaringan Neural Network yang telah dibuat sebelumnya."""

history = model.fit(
                    train_generator,
                    steps_per_epoch=25,
                    epochs=50,
                    validation_data=validation_generator,
                    validation_steps=4,
                    verbose=2)

""" Membuat plot terhadap akurasi dan loss model"""

#plot for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')

plt.show()

#plot for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')

plt.show()

"""Menulis kode untuk menyimpan model ke dalam format TF-Lite"""

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
with tf.io.gfile.GFile('model.tflite', 'wb') as f:
    f.write(tflite_model)